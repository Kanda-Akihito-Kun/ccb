name: Update CDN Data

on:
  push:
    branches: [ main ]  # 当推送到 main 分支时触发
  schedule:
    - cron: '0 20 * * 6'  # 每周日东八区凌晨 4 点 (UTC 的前一天 20 点) 运行
  workflow_dispatch:  # 允许手动触发

jobs:
  update-cdn:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Create Data Directory
        run: mkdir -p data

      - name: Update CDN Data
        run: |
          cat > update.go << 'EOL'
          package main

          import (
              "encoding/json"
              "fmt"
              "io"
              "log"
              "net/http"
              "sort"
              "os"
              "strings"
              "time"
          )

          type Region struct {
              Abbr string
              Name string
          }

          type Response struct {
              Status bool   `json:"status"`
              Code   int    `json:"code"`
              Msg    string `json:"msg"`
              Data   struct {
                  Domain   string   `json:"domain"`
                  Page     int      `json:"page"`
                  PageSize int      `json:"pageSize"`
                  Result   []string `json:"result"`
              } `json:"data"`
          }

          var (
              regionPatternMap = []Region{
                  {Abbr: "-bj", Name: "北京"},
                  {Abbr: "-sh-", Name: "上海"},
                  {Abbr: "-gdgz-", Name: "广州"},
                  {Abbr: "-sz-", Name: "深圳"},
                  {Abbr: "-zjhz-", Name: "杭州"},
                  {Abbr: "-sccd-", Name: "成都"},
                  {Abbr: "-jsnj-", Name: "南京"},
                  {Abbr: "-tj-", Name: "天津"},
                  {Abbr: "-hbwh-", Name: "武汉"},
                  {Abbr: "-fjqz-", Name: "泉州"},
                  {Abbr: "-hnzz-", Name: "郑州"},
                  {Abbr: "-sxxa-", Name: "西安"},
                  {Abbr: "-lnsy-", Name: "沈阳"},
                  {Abbr: "-hljheb-", Name: "哈市"},
                  {Abbr: "-nmghhht-", Name: "呼市"},
                  {Abbr: "-xj-", Name: "新疆"},
                  {Abbr: "-gotcha", Name: "外建"},
                  {Abbr: "-hk-", Name: "香港"},
                  {Abbr: "-kaigai-", Name: "海外"},
              }

              kaigaiCdnList = []string{
                  "upos-hz-mirrorakam.akamaized.net",
                  "upos-sz-mirroraliov.bilivideo.com",
                  "upos-sz-mirrorcosov.bilivideo.com",
              }

              cdnMap = make(map[string][]string)
          )

          func matchSubDomainToRegion(response Response) {
              for _, subDomain := range response.Data.Result {
                  for _, v := range regionPatternMap {
                      if strings.Contains(subDomain, v.Abbr) {
                          cdnMap[v.Name] = append(cdnMap[v.Name], subDomain)
                      }
                  }
              }
              cdnMap["海外"] = kaigaiCdnList
              for region := range cdnMap {
                  sort.Strings(cdnMap[region])
              }
          }
          
          func main() {
              for i := 0; i < 20; i++ {
                  url := fmt.Sprintf("https://chaziyu.com/ipchaxun.do?domain=bilivideo.com&page=%d", i)
                  client := &http.Client{Timeout: 10 * time.Second}
                  req, err := http.NewRequest("GET", url, nil)

                  req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
                  req.Header.Set("Accept", "application/json")
                  req.Header.Set("Referer", "https://chaziyu.com")

                  resp, err := client.Do(req)
                  if err != nil {
                      log.Printf("请求失败 [%d]: %v", i, err)
                      continue
                  }

                  body, err := io.ReadAll(resp.Body)
                  resp.Body.Close()
                  if err != nil {
                      log.Printf("读取响应失败 [%d]: %v", i, err)
                      continue
                  }

                  var response Response
                  if err := json.Unmarshal(body, &response); err != nil {
                      log.Printf("解析JSON失败 [%d]: %v", i, err)
                      continue
                  }

                  matchSubDomainToRegion(response)
              }

              // 生成region列表
              var regionList []string
              for _, v := range regionPatternMap {
                  regionList = append(regionList, v.Name)
              }

              // 保存CDN数据
              cdnData, err := json.MarshalIndent(cdnMap, "", "  ")
              if err != nil {
                  log.Fatal("序列化CDN数据失败:", err)
              }
              if err := os.WriteFile("data/cdn.json", cdnData, 0644); err != nil {
                  log.Fatal("保存CDN数据失败:", err)
              }

              // 保存地区列表
              regionData, err := json.MarshalIndent(regionList, "", "  ")
              if err != nil {
                  log.Fatal("序列化地区列表失败:", err)
              }
              if err := os.WriteFile("data/region.json", regionData, 0644); err != nil {
                  log.Fatal("保存地区列表失败:", err)
              }

              // 保存更新时间
              info := map[string]interface{}{
                  "lastSuccessTime": time.Now().Format(time.RFC3339),
              }
              infoData, err := json.MarshalIndent(info, "", "  ")
              if err != nil {
                  log.Fatal("序列化信息失败:", err)
              }
              if err := os.WriteFile("data/info.json", infoData, 0644); err != nil {
                  log.Fatal("保存信息失败:", err)
              }
          }
          EOL

          go run update.go

      - name: Commit and Push Changes
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add data/
          git commit -m "Update CDN data $(date -u)"
          git push